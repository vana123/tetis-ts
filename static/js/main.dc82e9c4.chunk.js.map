{"version":3,"sources":["components/tetris-board.tsx","components/Start/Start.tsx","components/tetris.tsx","index.tsx"],"names":["TetrisBoard","props","rows","field","forEach","row","index","cols","map","column","react","className","concat","key","push","level","score","gameOver","Start","_ref","handlePauseClick","_useState","useState","_useState2","Object","slicedToArray","Flag","setFlag","react_default","a","createElement","onClick","Tetris","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onKeyDownHandler","event","console","log","keyCode","setState","action","handleBoardUpdate","state","command","arguments","length","undefined","isPaused","xAdd","yAdd","rotateAdd","tile","activeTile","x","activeTileX","y","activeTileY","rotate","tileRotate","tiles","xAddIsValid","i","boardWidth","newRotate","rotateIsValid","boardHeight","yAddIsValid","isLineComplete","col","timerId","prev","tileCount","Math","floor","clearInterval","setInterval","random","parseInt","handleNewGameClick","xStart","_this2","window","_this3","Start_Start_Start","tetris_board","React","ReactDOM","tetris","document","getElementById"],"mappings":"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","file":"static/js/main.dc82e9c4.chunk.js","sourcesContent":["// Import React\nimport * as React from 'react'\n\n// Define props for TetrisBoard component\ntype TetrisBoardProps = {\n  field: any[],\n  gameOver: boolean,\n  score: number,\n  level: number,\n  rotate: number\n}\n\n// Create TetrisBoard component\nconst TetrisBoard: React.FC<TetrisBoardProps> = (props) => {\n  // Create board rows\n  let rows: any[] = []\n\n  props.field.forEach((row, index) => {\n    // Create board columns\n    const cols = row.map((column: any, index: number) => <div className={`col-${column}`} key={index} />)\n\n    rows.push(<div className=\"tetris-board__row\" key={index}>{cols}</div>)\n  })\n\n  return (\n    <div className=\"tetris-board\">\n      {/* Game info */}\n      <div className=\"tetris-board__info tetris-board__text\">\n        Level: {props.level} Score: {props.score}\n\n        {/* <p className=\"tetris-board__text\">Score: {props.score}</p> */}\n\n        {props.gameOver && <p className=\"tetris-board__text\"><strong>Game Over</strong></p>}\n      </div>\n\n      {/* Game board */}\n      <div className=\"tetris-board__board\">{rows}</div>\n    </div>\n  )\n}\n\nexport default TetrisBoard\n","import React, {useState} from \"react\";\r\nimport './Start.css'\r\n\r\ntype ButtonProps = {\r\n    handlePauseClick: () => void\r\n}\r\n\r\nexport const Start = ({handlePauseClick}: ButtonProps) =>{\r\n\r\n    const [Flag, setFlag] = useState(true)\r\n\r\n    const clickHandler = () => {\r\n        handlePauseClick()\r\n        setFlag(!Flag)\r\n    }\r\n\r\n    return(\r\n        <div className={Flag ? \"activeFlag Start\" : \"inactiveFlag Start\"} onClick={clickHandler}>\r\n            <button className=\"Start__button\">\r\n                START\r\n            </button>\r\n        </div>\r\n    )\r\n}","import * as React from 'react'\n\n// Import TetrisBoard component\nimport TetrisBoard from './tetris-board'\nimport { Start } from './Start/Start';\n\n// Define props for Tetris component\ntype TetrisProps = {\n  boardWidth: any,\n  boardHeight: any\n}\n\n// Define props for Tetris component state\ntype TetrisState = {\n  activeTileX: number,\n  activeTileY: number,\n  activeTile: number,\n  tileRotate: number,\n  score: number,\n  level: number,\n  tileCount: number,\n  gameOver: boolean,\n  isPaused: boolean,\n  field: any[],\n  timerId: any,\n  tiles: number[][][][],\n  action: string\n}\n\n// Create Tetris component\nclass Tetris extends React.Component<TetrisProps, TetrisState> {\n  constructor(props: any) {\n    super(props)\n\n    // Generate board based on number of boardHeight & boardWidth props\n    let field = []\n\n    for (let y = 0; y < props.boardHeight; y++) {\n      let row = []\n\n      for (let x = 0; x < props.boardWidth; x++) {\n        row.push(0)\n      }\n\n      field.push(row)\n    }\n\n    // Set starting column to center\n    let xStart = Math.floor(parseInt(props.boardWidth) / 2)\n\n    // Initialize state with starting conditions\n    this.state = {\n      activeTileX: xStart,\n      activeTileY: 1,\n      activeTile: 1,\n      tileRotate: 0,\n      score: 0,\n      level: 1,\n      tileCount: 0,\n      gameOver: false,\n      isPaused: true,\n      field: field,\n      timerId: null,\n      action: '',\n      tiles: [\n        // 7 tiles\n        // Each tile can be rotated 4 times (x/y coordinates)\n        [\n          // The default square\n          [[0, 0], [0, 0], [0, 0], [0, 0]],\n          [[0, 0], [0, 0], [0, 0], [0, 0]],\n          [[0, 0], [0, 0], [0, 0], [0, 0]],\n          [[0, 0], [0, 0], [0, 0], [0, 0]]\n        ],\n        [\n          // The cube tile (block 2x2)\n          [[0, 0], [1, 0], [0, 1], [1, 1]],\n          [[0, 0], [1, 0], [0, 1], [1, 1]],\n          [[0, 0], [1, 0], [0, 1], [1, 1]],\n          [[0, 0], [1, 0], [0, 1], [1, 1]]\n        ],\n        [\n          // The I tile\n          [[0, -1], [0, 0], [0, 1], [0, 2]],\n          [[-1, 0], [0, 0], [1, 0], [2, 0]],\n          [[0, -1], [0, 0], [0, 1], [0, 2]],\n          [[-1, 0], [0, 0], [1, 0], [2, 0]]\n        ],\n        [\n          // The T tile\n          [[0, 0], [-1, 0], [1, 0], [0, -1]],\n          [[0, 0], [1, 0], [0, 1], [0, -1]],\n          [[0, 0], [-1, 0], [1, 0], [0, 1]],\n          [[0, 0], [-1, 0], [0, 1], [0, -1]]\n        ],\n        [\n          // The inverse L tile\n          [[0, 0], [-1, 0], [1, 0], [-1, -1]],\n          [[0, 0], [0, 1], [0, -1], [1, -1]],\n          [[0, 0], [1, 0], [-1, 0], [1, 1]],\n          [[0, 0], [0, 1], [0, -1], [-1, 1]]\n        ],\n        [\n          // The L tile\n          [[0, 0], [1, 0], [-1, 0], [1, -1]],\n          [[0, 0], [0, 1], [0, -1], [1, 1]],\n          [[0, 0], [1, 0], [-1, 0], [-1, 1]],\n          [[0, 0], [0, 1], [0, -1], [-1, -1]]\n        ],\n        [\n          // The Z tile\n          [[0, 0], [1, 0], [0, -1], [-1, -1]],\n          [[0, 0], [1, 0], [0, 1], [1, -1]],\n          [[0, 0], [1, 0], [0, -1], [-1, -1]],\n          [[0, 0], [1, 0], [0, 1], [1, -1]]\n        ],\n        [\n          // The inverse Z tile\n          [[0, 0], [-1, 0], [0, -1], [1, -1]],\n          [[0, 0], [0, -1], [1, 0], [1, 1]],\n          [[0, 0], [-1, 0], [0, -1], [1, -1]],\n          [[0, 0], [0, -1], [1, 0], [1, 1]]\n        ],\n        [\n          // The inverse naze г tile\n          [[0, 0], [-1, 0], [0, -1], [0, 0]],\n          [[0, 0], [1, 0], [0, -1], [0, 0]],\n          [[0, 0], [1, 0], [0, 1], [0, 0]],\n          [[0, 0], [-1, 0], [0, 1], [0, 0]]\n        ],\n        [\n          // one pointer\n          [[0, 0], [0, 0], [0, 0], [0, 0]],\n          [[0, 0], [0, 0], [0, 0], [0, 0]],\n          [[0, 0], [0, 0], [0, 0], [0, 0]],\n          [[0, 0], [0, 0], [0, 0], [0, 0]]\n        ],\n        [\n          // one pointer\n          [[0, 0], [-1, 0], [0, 0], [0, 0]],\n          [[0, 0], [0, -1], [0, 0], [0, 0]],\n          [[0, 0], [1, 0], [0, 0], [0, 0]],\n          [[0, 0], [0, 1], [0, 0], [0, 0]]\n        ]\n      ]\n    }\n  }\n\n  /**\n   * @description Sets timer after component mounts\n   * Uses level (this.state.level) to determine the timeout (game speed)\n   * and executes handleBoardUpdate() set to 'down' method during each interval\n   * @memberof Tetris\n   */\n  componentDidMount() {\n    let timerId\n\n    timerId = window.setInterval(\n      () => this.handleBoardUpdate('down'),\n      1000 - (this.state.level * 10 > 600 ? 600 : this.state.level * 10)\n    )\n\n    this.setState({\n      timerId: timerId\n    })\n  }\n\n  /**\n   * @description Resets the timer when component unmounts\n   * @memberof Tetris\n   */\n  componentWillUnmount() {\n    window.clearInterval(this.state.timerId)\n  }\n\n  /**\n   * @description Handles board updates\n   * @param {string} command\n   * @memberof Tetris\n   */\n\n    // unPouze = () \n\n    onKeyDownHandler = (event:React.KeyboardEvent<HTMLDivElement>) =>{\n    console.log(event.keyCode)\n    switch (event.keyCode) {\n      case 65:\n        this.setState({action: 'left'})\n        this.handleBoardUpdate(this.state.action)\n        break;\n        case 68:\n          this.setState({action: 'right'})\n          this.handleBoardUpdate(this.state.action)\n          break;\n        case 83:\n          this.setState({action: 'down'})\n          this.handleBoardUpdate(this.state.action)\n          break;\n        case 87:\n          this.setState({action: 'rotate'})\n          this.handleBoardUpdate(this.state.action)\n          break;\n          \n\n      default:\n        break;\n    }\n   }\n\n  handleBoardUpdate = (command: string = '') => {\n    // Do nothing if game ends, or is paused\n    if (this.state.gameOver || this.state.isPaused) {\n      return\n    }\n\n    // Prepare variables for additions to x/y coordinates, current active tile and new rotation\n    let xAdd = 0\n    let yAdd = 0\n    let rotateAdd = 0\n    let tile = this.state.activeTile\n\n    // If tile should move to the left\n    // set xAdd to -1\n    if (command === 'left') {\n      xAdd = -1\n    }\n\n    // If tile should move to the right\n    // set xAdd to 1\n    if (command === 'right') {\n      xAdd = 1\n    }\n\n    // If tile should be rotated\n    // set rotateAdd to 1\n    if (command === 'rotate') {\n      rotateAdd = 1\n    }\n\n    // If tile should fall faster\n    // set yAdd to 1\n    if (command === 'down') {\n      yAdd = 1\n    }\n\n    // Get current x/y coordinates, active tile, rotate and all tiles\n    let field = this.state.field\n    let x = this.state.activeTileX\n    let y = this.state.activeTileY\n    let rotate = this.state.tileRotate\n\n    const tiles = this.state.tiles\n\n    // Remove actual tile from field to test for new insert position\n    field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] = 0\n    field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] = 0\n    field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] = 0\n    field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] = 0\n\n    // Test if the move can be executed on actual field\n    let xAddIsValid = true\n\n    // Test if tile should move horizontally\n    if (xAdd !== 0) {\n      for (let i = 0; i <= 3; i++) {\n        // Test if tile can be moved without getting outside the board\n        if (\n          x + xAdd + tiles[tile][rotate][i][0] >= 0\n          && x + xAdd + tiles[tile][rotate][i][0] < this.props.boardWidth\n        ) {\n          if (field[y + tiles[tile][rotate][i][1]][x + xAdd + tiles[tile][rotate][i][0]] !== 0) {\n            // Prevent the move\n            xAddIsValid = false\n          }\n        } else {\n          // Prevent the move\n          xAddIsValid = false\n        }\n      }\n    }\n\n    // If horizontal move is valid update x variable (move the tile)\n    if (xAddIsValid) {\n      x += xAdd\n    }\n\n    // Try to rotate the tile\n    let newRotate = rotate + rotateAdd > 3 ? 0 : rotate + rotateAdd\n    let rotateIsValid = true\n\n    // Test if tile should rotate\n    if (rotateAdd !== 0) {\n      for (let i = 0; i <= 3; i++) {\n        // Test if tile can be rotated without getting outside the board\n        if (\n          x + tiles[tile][newRotate][i][0] >= 0 &&\n          x + tiles[tile][newRotate][i][0] < this.props.boardWidth &&\n          y + tiles[tile][newRotate][i][1] >= 0 &&\n          y + tiles[tile][newRotate][i][1] < this.props.boardHeight\n        ) {\n          // Test of tile rotation is not blocked by other tiles\n          if (\n            field[y + tiles[tile][newRotate][i][1]][\n              x + tiles[tile][newRotate][i][0]\n            ] !== 0\n          ) {\n            // Prevent rotation\n            rotateIsValid = false\n          }\n        } else {\n          // Prevent rotation\n          rotateIsValid = false\n        }\n      }\n    }\n\n    // If rotation is valid update rotate variable (rotate the tile)\n    if (rotateIsValid) {\n      rotate = newRotate\n    }\n\n    // Try to speed up the fall of the tile\n    let yAddIsValid = true\n\n    // Test if tile should fall faster\n    if (yAdd !== 0) {\n      for (let i = 0; i <= 3; i++) {\n        // Test if tile can fall faster without getting outside the board\n        if (\n          y + yAdd + tiles[tile][rotate][i][1] >= 0 &&\n          y + yAdd + tiles[tile][rotate][i][1] < this.props.boardHeight\n        ) {\n          // Test if faster fall is not blocked by other tiles\n          if (\n            field[y + yAdd + tiles[tile][rotate][i][1]][\n              x + tiles[tile][rotate][i][0]\n            ] !== 0\n          ) {\n            // Prevent faster fall\n            yAddIsValid = false\n          }\n        } else {\n          // Prevent faster fall\n          yAddIsValid = false\n        }\n      }\n    }\n\n    // If speeding up the fall is valid (move the tile down faster)\n    if (yAddIsValid) {\n      y += yAdd\n    }\n\n    // Render the tile at new position\n    field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] = tile\n    field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] = tile\n    field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] = tile\n    field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] = tile\n\n    // If moving down is not possible, remove completed rows add score\n    // and find next tile and check if game is over\n    if (!yAddIsValid) {\n      for (let row = this.props.boardHeight - 1; row >= 0; row--) {\n        let isLineComplete = true\n\n        // Check if row is completed\n        for (let col = 0; col < this.props.boardWidth; col++) {\n          if (field[row][col] === 0) {\n            isLineComplete = false\n          }\n        }\n\n        // Remove completed rows\n        if (isLineComplete) {\n          for (let yRowSrc = row; row > 0; row--) {\n            for (let col = 0; col < this.props.boardWidth; col++) {\n              field[row][col] = field[row - 1][col]\n            }\n          }\n\n          // Check if the row is the last\n          row = this.props.boardHeight\n        }\n      }\n\n      // Update state - update score, update number of tiles, change level\n      this.setState(prev => ({\n        score: prev.score + 1 * prev.level,\n        tileCount: prev.tileCount + 1,\n        level: 1 + Math.floor(prev.tileCount / 10)\n      }))\n\n      // Prepare new timer\n      let timerId\n\n      // Reset the timer\n      clearInterval(this.state.timerId)\n\n      // Update new timer\n      timerId = setInterval(\n        () => this.handleBoardUpdate('down'),\n        1000 - (this.state.level * 10 > 600 ? 600 : this.state.level * 10)\n      )\n\n      // Use new timer\n      this.setState({\n        timerId: timerId\n      })\n\n      // Create new tile\n      tile = Math.floor(Math.random() * 10 + 1)\n      x = parseInt(this.props.boardWidth) / 2\n      y = 1\n      rotate = 0\n\n      // Test if game is over - test if new tile can't be placed in field\n      if (\n        field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] !== 0 ||\n        field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] !== 0 ||\n        field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] !== 0 ||\n        field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] !== 0\n      ) {\n        // Stop the game\n        this.setState({\n          gameOver: true\n        })\n      } else {\n        // Otherwise, render new tile and continue\n        field[y + tiles[tile][rotate][0][1]][x + tiles[tile][rotate][0][0]] = tile\n        field[y + tiles[tile][rotate][1][1]][x + tiles[tile][rotate][1][0]] = tile\n        field[y + tiles[tile][rotate][2][1]][x + tiles[tile][rotate][2][0]] = tile\n        field[y + tiles[tile][rotate][3][1]][x + tiles[tile][rotate][3][0]] = tile\n      }\n    }\n\n    // Update state - use new field, active x/y coordinates, rotation and activeTile\n    this.setState({\n      field: field,\n      activeTileX: x,\n      activeTileY: y,\n      tileRotate: rotate,\n      activeTile: tile\n    })\n  }\n\n  /**\n   * @description Stops and resumes the game\n   * @memberof Tetris\n   */\n  handlePauseClick = () => {\n    this.setState(prev => ({\n      isPaused: !prev.isPaused\n    }))\n  }\n\n  /**\n   * @description Resets the game\n   * @memberof Tetris\n   */\n  handleNewGameClick = () => {\n    // Create an empty board\n    let field: any[] = []\n\n    for (let y = 0; y < this.props.boardHeight; y++) {\n      let row = []\n\n      for (let x = 0; x < this.props.boardWidth; x++) {\n        row.push(0)\n      }\n\n      field.push(row)\n    }\n\n    // Set starting column to center\n    let xStart = Math.floor(parseInt(this.props.boardWidth) / 2)\n\n    // Initialize state with starting conditions\n    this.setState({\n      activeTileX: xStart,\n      activeTileY: 1,\n      activeTile: 2,\n      tileRotate: 0,\n      score: 0,\n      level: 1,\n      tileCount: 0,\n      gameOver: false,\n      field: field\n    })\n  }\n\n  render() {\n    return (\n      \n      <div className=\"tetris\">\n        <Start\n          handlePauseClick={this.handlePauseClick}\n        />\n        {/* Tetris board */}\n        <div className=\"wraper\">\n\n          <TetrisBoard\n            field={this.state.field}\n            gameOver={this.state.gameOver}\n            score={this.state.score}\n            level={this.state.level}\n            rotate={this.state.tileRotate}\n          />\n\n          {/* Buttons to control blocks */}\n          {/* <div className=\"container\" tabIndex={0} onKeyDown={this.onKeyDownHandler} auto-focus>\n            imputer\n          </div> */}\n          <div className='tetris__controls'>\n            <button className=\"btn left\" onClick={() => this.handleBoardUpdate('left')}>Left</button>\n\n            <button className=\"btn down\" onClick={() => this.handleBoardUpdate('down')}>Down</button>\n\n            <button className=\"btn right\" onClick={() => this.handleBoardUpdate('right')}>Right</button>\n\n            <button className=\"btn rotate\" onClick={() => this.handleBoardUpdate('rotate')}>Rotate</button>\n\n            <button className=\"btn NewGame\" onClick={this.handleNewGameClick}>New Game</button>\n\n            <button className=\"btn Pause\" onClick={this.handlePauseClick}>{this.state.isPaused ? 'Resume' : 'Pause'}</button>\n          </div>\n        </div>\n\n        \n      </div>\n    )\n  }\n}\n\nexport default Tetris\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\n\n// Import Tetris component\nimport Tetris from './components/tetris'\n\n// Import styles\nimport './styles/styles.css'\n\nReactDOM.render(<Tetris boardWidth=\"14\" boardHeight=\"20\" />, document.getElementById('root'))"],"sourceRoot":""}